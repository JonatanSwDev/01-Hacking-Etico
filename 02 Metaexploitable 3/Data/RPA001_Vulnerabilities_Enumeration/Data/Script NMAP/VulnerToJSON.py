import re
import json

# Texto completo con las secciones y los CVEs
# Leer el texto desde el archivo
with open("./Complete.txt", "r") as archivo:
    texto_completo = archivo.read()

# Lista de secciones
# Leer el texto desde el archivo
with open("./sV.txt", "r") as archivo:
    sv = archivo.read()

# Buscar los puertos y su información correspondiente
secciones = re.findall(r'(\d+\/tcp\s+open+\s+\S+\s+.+)', sv)
print(secciones)

# Dividir el texto en secciones usando expresiones regulares
patron_seccion = r"\d+\/tcp\s+.*?(?=\d+\/tcp|\Z)"
secciones_encontradas = re.findall(patron_seccion, texto_completo, re.DOTALL)

print(secciones_encontradas)


# Crear un diccionario para almacenar las secciones y su contenido
diccionario_secciones = {}
for i, seccion in enumerate(secciones):
    if i < len(secciones_encontradas):
        contenido = secciones_encontradas[i].strip()
        # Utilizar expresiones regulares para extraer los CVEs y sus enlaces
        cves_y_enlaces = re.findall(r'(CVE-\d+-\d+)\s+\d+\.\d+\s+(https://vulners\.com/cve/\1)', contenido)
        diccionario_secciones[seccion] = [{"CVE":cve[0], "URL":cve[1]} for cve in cves_y_enlaces]

# Guardar el diccionario como un archivo JSON
with open('secciones_cves.json', 'w') as archivo_json:
    json.dump(diccionario_secciones, archivo_json, indent=4)

# Imprimir las secciones encontradas
for seccion, cves_enlaces in diccionario_secciones.items():
    print(f"Sección: {seccion}")
    for cve, enlace in cves_enlaces:
        print(f"CVE: {cve}, Enlace: {enlace}")
    print()
